/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'simon' at '30.06.16 23:30' with Gradle 2.14
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14/userguide/tutorial_java_projects.html
 */

plugins {
    id "ca.coglinc.javacc" version "2.4.0"
    id "org.sonarqube" version "4.0.0.2929"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "jacoco"

version = '0.8.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/ch/poole/poparser')
    javaccSourcePath = project.buildDir.absolutePath + '/generated/javacc/'
    javaccSource = file(javaccSourcePath)
    mainSource = file('src/main/java/ch/poole/poparser')
    testSource = file('src/test/java/ch/poole/poparser')
}

eclipse {
    classpath {
        file {
            beforeMerged { classpath ->
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(javaccSourcePath, "bin"))
             }
        }
    }
}

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccOutput,mainSource
}

compileTestJava {
    source javaccOutput,mainSource,testSource
}

test {
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
}

javadoc {
    source mainSource, testSource
    exclude '**/*.jj'
    failOnError = false
}

task sourcesJar(type: Jar) {
	from mainSource, testSource
	archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
//	options.encoding = 'UTF-8'
}

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole([\\:/])PoParser([\\:/])([0-9\\.]+)', replace:"ch.poole\\1PoParser\\2${version}", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/java/main/"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", "true"
    }
}

ext {
    repoUrl = 'https://github.com/simonpoole/PoParser.git'
    spdxId = 'BSD 3-Clause'
}

publishing {
    publications {
        Release(MavenPublication) {
            from components.java
            groupId 'ch.poole'
            artifactId 'PoParser'
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = 'This is a simple parser for gettext .po files'    
                url = 'https://github.com/simonpoole/PoParser'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/PoParser/master/LICENCE.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    credentials {
                        username System.getenv('SONATYPE_USER')
                        password System.getenv('SONATYPE_PASSWORD')
                    }
                    def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	testImplementation 'junit:junit:4.12'
}
